"""
First, a few handler functions are defined. Then, those functions are passed to
the Dispatcher and registered at their respective places.
"""

import logging
from typing import Tuple, Optional
from telegram import (
  Chat,
  ChatMember,
  ChatMemberUpdated,
  ForceReply,
  InlineKeyboardButton,
  InlineKeyboardMarkup,
  ParseMode,
  Update
)
from telegram.ext import (
  CallbackContext,
  CallbackQueryHandler,
  ChatMemberHandler,
  CommandHandler,
  Filters,
  MessageHandler,
  Updater
)

# Enable logging
logging.basicConfig(
  format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)

logger = logging.getLogger(__name__)

greetings = '–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —á–∞—Ç –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–æ–≤, –º—ã –∑–¥–µ—Å—å –∑–Ω–∞–∫–æ–º–∏–º—Å—è –∏ –æ–±—Å—É–∂–¥–∞–µ–º –Ω–∞—Å—É—â–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Å—è –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ª–Ω—É—é—â–∏–µ —Ç–µ–±—è –≤–æ–ø—Ä–æ—Å—ã, –∫–æ–ª–ª–µ–≥–∏ —Å —Ä–∞–¥–æ—Å—Ç—å—é –ø–æ–º–æ–≥—É—Ç. –ö—Å—Ç–∞—Ç–∏, –º—ã –∑–¥–µ—Å—å –¥—Ä—É–≥ –∫ –¥—Ä—É–≥—É –Ω–∞ "—Ç—ã", –ø–æ–≤–µ—Ä—å, —ç—Ç–æ —Ä–µ–∞–ª—å–Ω–æ —Å–±–ª–∏–∂–∞–µ—Çü§ó. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ—á–∏—Ç–∞–π –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ —á–∞—Ç–∞. –ï—Å–ª–∏ –æ—Ç–∫—Ä–æ–µ—à—å —á–∞—Ç <a href="https://t.me/TehnologichniyBot">—Å–æ –º–Ω–æ–π</a>, —Ç–æ —Å–º–æ–≥—É —Ç–µ–±–µ –±—ã—Å—Ç—Ä–æ –¥–∞–≤–∞—Ç—å –≤—Å—è–∫—É—é –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ—É. –ê –µ—Å–ª–∏ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ, —Ç–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –µ—â—ë –∏ –∫ <a href="https://t.me/joinchat/WM9qX88NvFa9b06W">—ç—Ç–æ–º—É</a> —á–∞—Ç—É.'

# Define a few command handlers. These usually take the two arguments update and context.
def start_command(update: Update, context: CallbackContext) -> None:
  """Sends a message with three inline buttons attached."""
  userName = update.message.from_user.first_name
  answer = '–ü—Ä–∏–≤–µ—Ç, ' + userName + '! –Ø –≤—Ä–æ–¥–µ –¥–≤–æ—Ä–µ—Ü–∫–æ–≥–æ –≤ —á–∞—Ç–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–æ–≤, –∞ –≤ –ª–∏—á–∫–µ –º–æ–≥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª–µ–∑–Ω—ã—Ö –≤–µ—â–∞—Ö. –Ø –ø–æ–∫–∞ –µ—â—ë –¥–æ–≤–æ–ª—å–Ω–æ —Ç—É–ø–µ–Ω—å–∫–∏–π, –Ω–æ @curlyPue –Ω–∞–¥–æ –º–Ω–æ–π —Ä–∞–±–æ—Ç–∞–µ—Ç. –ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å –º–µ–Ω—è –ø–æ–ª–µ–∑–Ω–µ–µ - –ø–∏—à–∏ –µ–º—É —Å–∫–æ—Ä–µ–π! –í—ã–∑–≤–∞—Ç—å –º–µ–Ω—é —Å –Ω–∏—à—Ç—è–∫–∞–º–∏ –º–æ–∂–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π /menu –∏–ª–∏ –Ω–∞–∂–∞–≤ –Ω–∞ —Å–∏–Ω—é—é –∫–Ω–æ–ø–∫—É —Å–ª–µ–≤–∞ –æ—Ç —Å—Ç—Ä–æ–∫–∏ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞üôÇ'
  
  keyboard = [
    [
      InlineKeyboardButton("–¢—ã –∫—Ç–æ?", callback_data='1'),
      InlineKeyboardButton("Option 2", callback_data='2'),
    ],
    [InlineKeyboardButton("Option 3", callback_data='3')],
  ]

  reply_markup = InlineKeyboardMarkup(keyboard)

  update.message.reply_text(answer, reply_markup=reply_markup)

def button(update: Update, context: CallbackContext) -> None:
  """Parses the CallbackQuery and updates the message text."""
  query = update.callback_query

  # CallbackQueries need to be answered, even if no notification to the user is needed
  # Some clients may have trouble otherwise. See https://core.telegram.org/bots/api#callbackquery
  query.answer()

  query.edit_message_text(text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {query.data}")

def help_command(update: Update, context: CallbackContext) -> None:
  """Send a message when the command /help is issued."""
  update.message.reply_text('–ü–æ–º–æ–≥–∏—Ç–µ!')


def message(update: Update, context: CallbackContext) -> None:
  answer = 'answer'                                                     #—á—Ç–æ-—Ç–æ –ø—Ä–∏–¥—É–º–∞—Ç—å
  update.message.reply_text(answer)

def main() -> None:
  """Start the bot."""
  # Create the Updater and pass it your bot's token.
  updater = Updater("6256486251:AAHKx9OIMG6Q9g98p6XH8tzBuFmQSwrIt8M")

  # Get the dispatcher to register handlers
  dispatcher = updater.dispatcher

  dispatcher.add_handler(CommandHandler("start", start_command))
  dispatcher.add_handler(CommandHandler("help", help_command))
  dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, message))
  updater.dispatcher.add_handler(CallbackQueryHandler(button))

  # Start the Bot
  updater.start_polling()
  updater.idle()

if __name__ == '__main__':
  main()


"""
# echo function
def echo(update: Update, context: CallbackContext) -> None:
  update.message.reply_text(update.message.text)
"""
